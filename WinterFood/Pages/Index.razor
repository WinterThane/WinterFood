@page "/"
@using WinterFood.Data
@using WinterFood.Models
@using Blazorise
@inject RecipeService service
@inject NavigationManager Navigation

<style>
    .mr-2 {
        margin-right: 30px;
    }
</style>

<PageTitle>Index</PageTitle>

<div class="container">
    <h1>Winter Recipes</h1>

    @foreach (var recipe in Recipes)
    {
        <Card>
            <CardHeader>
                <Blazorise.CardTitle>
                    <Row>
                        <Column ColumnSize="ColumnSize.Is10">
                            <b>@recipe.Name</b>
                        </Column>
                            <Column ColumnSize="ColumnSize.Is2">
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Plus" IconSize="IconSize.Large" @onclick="AddNewRecipe" class="mr-2" />
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Edit" IconSize="IconSize.Large" @onclick="() => { ShowUpdateRecipe = !ShowUpdateRecipe; SetRecipeForUpdate(recipe); }" class="mr-2" />
                            <Blazorise.Icon Name="Blazorise.Icons.FontAwesome.FontAwesomeIcons.Minus" IconSize="IconSize.Large" @onclick="(() => DeleteRecipe(recipe))"  />
                        </Column>
                    </Row>
                </Blazorise.CardTitle>
            </CardHeader>
            <CardBody>
                <CardText>@recipe.Description</CardText>
                <CardImage src="@recipe.ImageUrl" alt="@recipe.Name" />
                <CardText>@recipe.Instructions</CardText>
                <CardText><b>Servings:</b> @recipe.Servings</CardText>
                <CardText><b>Prep Time:</b> @recipe.PrepTime</CardText>
                <CardText><b>Cook Time:</b> @recipe.CookTime</CardText>
                <CardText><b>Ingredients:</b></CardText>             
            </CardBody>
        </Card>
        <br />              
    }
    @if (ShowUpdateRecipe)
        {
            <h3>Update recipe</h3>
            <EditForm Model="@UpdateRecipe">
                <div class="form-group">
                    <label for="name">Name</label>
                    <InputText class="form-control" id="name" @bind-Value="UpdateRecipe.Name" />
                </div>
                <div class="form-group">
                    <label for="description">Description</label>
                    <InputText class="form-control" id="description" @bind-Value="UpdateRecipe.Description" />
                </div>
                <div class="form-group">
                    <label for="instructions">Instructions</label>
                    <InputText class="form-control" id="instructions" @bind-Value="UpdateRecipe.Instructions" />
                </div>
                <div class="form-group">
                    <label for="image">Image</label>
                    <InputText class="form-control" id="image" @bind-Value="UpdateRecipe.ImageUrl" />
                </div>
                <div class="form-group">
                    <label for="servings">Servings</label>
                    <InputText class="form-control" id="servings" @bind-Value="UpdateRecipe.Servings" />
                </div>
                <div class="form-group">
                    <label for="prepTime">Prep Time</label>
                    <InputText class="form-control" id="prepTime" @bind-Value="UpdateRecipe.PrepTime" />
                </div>
                <div class="form-group">
                    <label for="cookTime">Cook Time</label>
                    <InputText class="form-control" id="cookTime" @bind-Value="UpdateRecipe.CookTime" />
                </div>
                <Blazorise.Button Color="Color.Warning" Size="Size.Small" @onclick="UpdateRecipeData">Update Recipe</Blazorise.Button>
            </EditForm>
        } 
</div>

@code {
    // list of recipes
    List<Recipe> Recipes = new List<Recipe>();
    // update recipe
    Recipe UpdateRecipe = new Recipe();
    bool ShowUpdateRecipe = false;

    protected override async Task OnInitializedAsync()
    {
        // await Task.CompletedTask;
        await RefreshRecipes();
    }

    private async Task RefreshRecipes()
    {
        Recipes = await service.GetRecipesAsync();
    }

    private void AddNewRecipe()
    {
        Navigation.NavigateTo("/AddRecipe");
    }

    private void SetRecipeForUpdate(Recipe recipe)
    {
        if (recipe != null)
        {
            // create one Ingridient
            recipe.Ingredients = new List<Ingredient>();
            recipe.Ingredients.Add(new Ingredient
            {
                Name = "Default ingridient",
                Amount = "1",
                Units = "",
                RecipeId = recipe.Id
            });
            UpdateRecipe = recipe;
        }
    }

    private async Task UpdateRecipeData()
    {
        await service.UpdateRecipeAsync(UpdateRecipe);
        UpdateRecipe = new Recipe();
        ShowUpdateRecipe = false;
        await RefreshRecipes();
    }

    private async Task DeleteRecipe(Recipe recipe)
    {
        await service.DeleteRecipeAsync(recipe);
        await RefreshRecipes();
    }
}